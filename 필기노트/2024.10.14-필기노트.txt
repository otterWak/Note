20241014(월) DB - JOIN

====================
[ SUBQUERY ]

- 하나의 SQL문 안에 포함된 또 다른 SQL(SELECT)문
- 메인쿼리를 위해 보조 역할을 하는 쿼리문

0. 목차
1) 단일행(단일열) 서브쿼리
2) 다중행(단일열) 서브쿼리
3) 다중열 서브쿼리
4) 다중행 다중열 서브쿼리
5) 상[호연]관 서브쿼리  
6) 스칼라 서브쿼리
7) 인라인 뷰 (INLINE-VIEW)
8) WITH
9) RANK() OVER / DENSE_RANK() OVER



1. 단일행(단일열) 서브쿼리
- 서브쿼리의 조회 결과 값의 개수가 1개인 서브쿼리
- 단일행 서브쿼리 앞에는 '비교 연산자' 사용
- <, >, <=, >=, =, !=/<>/^=

예시) 
노옹철 사원의 급여보다 많이 받는 직원의
사번, 이름, 부서명, 직급명, 급여 조회

SELCT EMP_ID , EMP_NAME , DEPT_TITLE , JOB_NAME , SALARY
FROM EMPLOYEE
NATURAL JOIN
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE SALARY >
(SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME='노옹철'


2. 다중행(단일열) 서브쿼리
- 서브쿼리의 조회 결과 값의 개수가 여러행인 경우
- 일반 비교 연산자 사용 X
※사용 연산자
1) IN / NOT IN
- 여러개의 열과 값 중에서 한 개라도 일치하지 하는 값이 있는지 없는지
2) >ANY / <ANY
- 여러 값 중 한 개라도 작거나 큰지
3) >ALL / <ALL
- 모든 값 보다 큰지 작은지
4) EXISTS / NOT EXISTS
- 값이 존재 하는지 아닌지

예시)
차장 직급의 급여 중 가장 큰 값보다 많이 받는 과장 직급의 직원의
사번, 이름, 직급, 급여 조회

SELECT EMP_ID , EMP_NAME, JOB_NAME , SALARY
FROM EMPLOYEE
NATURAL JOIN JOB
WHERE JOB_NAME = '과장'
AND SALARY >ALL
(SELECT SALARY
 FROM EMPLOYEE
 JOIN JOB USING(JOB_CODE)
 WHERE JOB_NAME = '차장');


3. 다중열 서브쿼리
- 서브쿼리 SELECT 절에 나열된 컬럼 수가 여러개 일 때

예시)
2000년도에 입사한 사원의 부서와 직급이 같은 사원의
사번, 이름, 부서코드, 직급코드, 입사일 조회

SELECT EMP_ID , EMP_NAME , DEPT_CODE , JOB_CODE , HIRE_DATE
FROM EMPLOYEE
WHERE (DEPT_CODE , JOB_CODE) =
(SELECT DEPT_CODE , JOB_CODE
 FROM EMPLOYEE
 WHERE EXTRACT (YEAR FROM HIRE_DATE) = 2000);


4. 다중행 다중열 서브쿼리
- 서브쿼리 조회 결과 행 수와 열 수가 여러개 일 때

예시)
본인이 소속된 직급의 평균 급여를 받고 있는 직원의
사번, 이름, 직급코드, 급여 조회
(단, 급여와 급여 평균은 만원단위로 계산)

SELECT EMP_ID , EMP_NAME , JOB_CODE , SALARY
FROM EMPLOYEE
WHERE (JOB_CODE , SALARY) IN
(SELECT JOB_CODE , TRUNC(AVG(SALARY), -4)
 FROM EMPLOYEE
 GROUP BY JOB_CODE);

5. 상[호연]관 서브쿼리 
상관 쿼리는 메인쿼리가 사용하는 테이블값을 서브쿼리가 이용해서 결과를 만듦
메인쿼리의 테이블값이 변경되면 서브쿼리의 결과값도 바뀌게 되는 구조

상관쿼리는 먼저 메인쿼리 한 행을 조회하고
해당 행이 서브쿼리의 조건을 충족하는지 확인하여 SELECT를 진행함

** 해석순서가 기존 서브쿼리와 다르게
메인쿼리 1행 -> 1행에 대한 서브쿼리 수행
메인쿼리 2행 -> 2행에 대한 서브쿼리 수행
...
메인쿼리의 행의 수 만큼 서브쿼리가 생성되어 진행됨

SELECT EMP_ID , EMP_NAME , DEPT_TITLE , MANAGER_ID 
FROM EMPLOYEE MAIN
LEFT JOIN DEPARTMENT ON(DEPT_ID = DEPT_CODE)
WHERE MANAGER_ID =
(SELECT EMP_ID
 FROM EMPLOYEE SUB
 WHERE SUB.EMP_ID = MAIN.MANAGER_ID);

6. 스칼라 서브쿼리
SELECT절에 사용된 서브쿼리 결과로 1행만 반환함
SQL에서 단일 값을 '스칼라' 라고 함
즉, SELECT 절에 작성되는 단일행 단일열 서브쿼리를 스칼라 서브쿼리라고 함

SELECT  EMP_NAME , JOB_CODE , SALARY ,
(SELECT CEIL(AVG(SALARY))
 FROM EMPLOYEE SUB
 WHERE SUB.JOB_CODE = MAIN.JOB_CODE) 평균
FROM EMPLOYEE MAIN
ORDER BY JOB_CODE;

7. 인라인 뷰 (INLINE-VIEW)
FROM 절에서 서브쿼리를 사용하는 경우로
서브쿼리가 만든 결과의 집합(RESULT SET)을 테이블 대신 사용

SELECT *
FROM
(SELECT EMP_NAME 이름, DEPT_TITLE 부서
 FROM EMPLOYEE
 JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID))
WHERE 부서 = '기술지원부';

8. WITH
서브쿼리에 이름 붙여주고 사용 시 이름을 사용하게 함
인라인뷰로 사용될 서브쿼리에 주로 사용됨
실행속도가 빨라진다는 장점이 있음

WITH TOP_SAL AS
(SELECT EMP_NAME, SALARY
 FROM EMPLOYEE
 ORDER BY SALARY DESC)
SELECT ROWNUM, EMP_NAME, SALARY
FROM TOP_SAL
WHERE ROWNUM<=10;

9. RANK() OVER : 동일한 순위 이후의 등수를 동일한 인원 수 만큼 건너 뛰고 순위 계산
EX) 공동 1위가 2명이면 다음 순위 2위가 아니라 3위

SELECT RANK() OVER(ORDER BY SALARY DESC) 순위,EMP_NAME, SALARY
FROM EMPLOYEE;

10/15 DB시험 : SQL 활용
- 범위는 다 배움
- 사용자 계정 생성 SYS라는 최고 관리자 계정으로 생성
  (그래야지 일반 사용자 계정 만들 수 있음)
- <SYS>로 열어서
  KH계정 생성하고, 권한 부여 함
  GRANT RESOURCE, CONNECT TO kh_lhg;
  (권한을 부여해야 테이블 생성할 수 있음)
- 01_SELECT
  비교 연산자, 논리 연산자(AND가 OR보다 우선순위가 높다)
  LIKE에서 ESCAPE 사용